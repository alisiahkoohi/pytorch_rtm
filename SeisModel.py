import torch
import torchvision
import torch.nn as nn
from torch.autograd import Function
import numpy as np


def absorbing_boundaries(nx, ny):

    size_mask = 30
    xMask = torch.ones(nx, 1, dtype=torch.float32)
    yMask = torch.ones(1, ny, dtype=torch.float32)
    fac = torch.tensor(0.006, dtype=torch.float32)

    for j in range(size_mask):
        xMask[j,0] = torch.exp(-(fac*(size_mask - j))**2)
        xMask[-1 - size_mask + j + 1,0] = torch.exp(-(fac*(size_mask-(size_mask+1+j)))**2)
        yMask[0,j] = torch.exp(-(fac*(size_mask - j))**2)
        yMask[0,-1 - size_mask + j + 1] = torch.exp(-(fac*(size_mask-(size_mask+1+j)))**2)

    Mx = torch.ones(1, 1, nx, ny, dtype=torch.float32)
    My = torch.ones(1, 1, nx, ny, dtype=torch.float32)
    for j in range(nx):
        Mx[0,0,j,:] = yMask[0,:]
    for j in range(ny):
        My[0,0,:,j] = xMask[:,0]

    return Mx*My

def ricker_wavelet(nt, dt, f0):
    t_axis = torch.linspace(0, (nt-1)*dt, nt)
    r = (np.pi*f0*(t_axis - 1/f0))
    q = (1.0 - 2.0*r**2)*torch.exp(-r**2)
    return q


def stencil(grid_spacing, order=4):

    if order==2:

        c1 = 1/grid_spacing**2
        c2 = -2/grid_spacing**2

        fd_stencil = torch.tensor([[0.0,c1,0.0], [c1,2*c2,c1], [0.0,c1,0.0]], dtype=torch.float32)

    elif order==4:

        c1 = -1/12/grid_spacing**2
        c2 = 4/3/grid_spacing**2
        c3 = -5/2/grid_spacing**2

        fd_stencil = torch.tensor([[0.0,0.0,c1,0.0,0.0], [0.0,0.0,c2,0.0,0.0], [c1,c2,2*c3,c2,c1],
                                  [0.0,0.0,c2,0.0,0.0], [0.0,0.0,c1,0.0,0.0]], dtype=torch.float32)

    elif order==20:

        c1 = -31752/293318625600/grid_spacing**2
        c2 = 784000/293318625600/grid_spacing**2
        c3 = -9426375/293318625600/grid_spacing**2
        c4 = 73872000/293318625600/grid_spacing**2
        c5 = -427329000/293318625600/grid_spacing**2
        c6 = 1969132032/293318625600/grid_spacing**2
        c7 = -7691922000/293318625600/grid_spacing**2
        c8 = 27349056000/293318625600/grid_spacing**2
        c9 = -99994986000/293318625600/grid_spacing**2
        c10 = 533306592000/293318625600/grid_spacing**2
        c11 = -909151481810/293318625600/grid_spacing**2

        fd_stencil = torch.tensor([[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c1,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c2,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c3,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c4,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c5,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c6,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c7,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c8,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c9,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c10, 0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, 2*c11, c10, c9, c8, c7, c6, c5, c4, c3, c2, c1],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c10, 0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c9,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c8,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c7,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c6,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c5,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c4,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c3,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c2,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
                                   [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,   c1,  0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]], dtype=torch.float32)
    else:
        raise Exception("Order not implemented")

    return fd_stencil
